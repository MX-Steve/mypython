.				匹配任意字符（换行符除外）
[x-y] 		匹配字符组里的任意字符
[^x-y]		匹配不在字符组里的任意字符
\d				匹配任意数字，与[0-9]同义
\w			匹配任意数字字母字符，与[0-9a-zA-Z_]同义
\s				匹配空白字符，与[\r\v\f\t\n]同义

re1|re2		匹配正则表达式re1或re2
*				零或多次
+				一次或多次
?				零或一次
{M,N}		匹配至少M次，匹配最多N次

^				匹配字符串的开始
$				匹配字符串的结尾
\b				匹配单词的边界
()				对正则表达式分组
\nn			匹配已保存的子组

*、+、?  : 都是贪婪匹配操作符，在其后加上?可以取消其贪婪匹配行为
				正则表达式匹配对象通过groups函数获取子组

match：尝试用正则表达式模式从字符串的开头匹配，如果匹配成功，则返回一个匹配对象；否则返回None
			re.match('foo','food is very good')
search：在字符串中查找正则表达式模式的第一次出现，如果匹配成功，则返回一个匹配对象；否则返回None
			re.match('foo','seafood)
group： 使用match或search匹配成功后，返回的匹配对象可以通过group方法获得匹配内容
			m=re.match(foo','seafood')
			print(m.group())
findall：返回一个匹配对象的列表
finditer：返回迭代器，该迭代器返回一个匹配对象
compile：对正则表达式模式进行编译，返回一个对象
split：根据表达式对字符串进行切割
sub：替换
		re.sub('x','y','sfdasfesx')


